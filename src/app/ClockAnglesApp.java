/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import javax.swing.JOptionPane;

/**
 *
 * @author dilantha
 */
public class ClockAnglesApp extends javax.swing.JFrame {

	/**
	 * Creates new form ClockAnglesApp
	 */
	public ClockAnglesApp() {
		initComponents();
	}
	private void startApp() {

		String hoursStr = hourString.getText();
		String minStr = minutesString.getText();
		String secStr = secondsString.getText();
		
		if (validateInputs(hoursStr,minStr,secStr)) {
			
			int hours = Integer.parseInt(hoursStr);
			int minutes = Integer.parseInt(minStr);
			int seconds = -1;
			if(secStr != null && secStr.length() > 0)
			{
				seconds = Integer.parseInt(secStr);
			}
			
			if(validateInputRanges(hours,minutes,seconds))
			{
				boolean hourHandMoves = moveHands.isSelected();
				int [] angles = calculate(hours,minutes,seconds,hourHandMoves);
				displayResults(angles,seconds);
			}
			else
			{
				JOptionPane.showMessageDialog(this, "Inputs are in out of range", "Invalid inputs", JOptionPane.ERROR_MESSAGE);
			}
			

		} else {
			JOptionPane.showMessageDialog(this, "Only integers are allowed", "Invalid inputs", JOptionPane.ERROR_MESSAGE);
		}
	}

	/**
	 * Display results in the UI
	 * @param angles
	 * @param seconds
	 */
	private void displayResults(int[] angles, int seconds) {
		StringBuilder sb = new StringBuilder();
		sb.append(" Hour hand and minute hand angle is : ");
		sb.append(angles[0]);
		if (seconds != -1) {
			sb.append("\n");
			sb.append("\n");
			sb.append("Second hand and minute hand angle is : ");
			sb.append(angles[1]);
		}

		resultPane.setText(sb.toString());
		
	}
	/**
	 * Check weather the passed inputs are within the range
	 * @param hours
	 * @param minutes
	 * @param seconds
	 * @return
	 */
	private boolean validateInputRanges(int hours, int minutes, int seconds) {
		boolean isValid = true;
		if (hours > 24 || hours < 0 || minutes < 0 || minutes > 60 || (seconds != -1 && (seconds < 0 || seconds > 60))) {
			isValid = false;
		}
		return isValid;
	}
	/**
	 * Check weather the passed inputs are numbers
	 * @param hours
	 * @param mins
	 * @param seconds
	 * @return
	 */
	private boolean validateInputs(String hours,String mins,String seconds) {

		boolean isValid = true;
		try {
			Integer.parseInt(hours);
			Integer.parseInt(mins);

			if (seconds != null && seconds.length() > 0) {
				Integer.parseInt(seconds);
			}
			
		} catch (NumberFormatException nf) {
			isValid = false;
		} catch (Exception ex) {
			isValid = false;
		}

		return isValid;
	}

	public int[] calculate(int hours, int mins, int seconds, boolean hourHandMoves) {
		
		int[] angles = new int[2];
		// make it 12 hours clock
		if (hours >= 12) {
			hours -= 12;
		}
		// get one hour angle in degrees
		int hourHand = 360 / 12;
		// get one minute angle in degrees
		int minHand = 360 / 60;
		// get one second in degrees
		int secondHand = 360 / 60;

		int hourHandAngle = (hourHand * hours);
		int minHandAngle = (minHand * mins);
		int secHandAngle = (secondHand * seconds);
		double additionalHourMovement = 0;
		double additionalMinMovement = 0;
		if (hourHandMoves) {
			// 0.5 = 30 / 60 (one hour angle in degrees / number of minutes
			// taken )
			additionalHourMovement = 0.5 * mins;
			hourHandAngle += Math.ceil(additionalHourMovement);

			// 0.1 = 6 / 60 (one minute angle in degrees / number of seconds
			// taken)
			additionalMinMovement = 0.1 * seconds;
			minHandAngle += Math.ceil(additionalMinMovement);
		}
		int angleHourNMin = Math.abs(hourHandAngle - minHandAngle);
		int angleMinNSec = Math.abs(minHandAngle - secHandAngle);
		angles[0] = angleHourNMin > 180 ? (angleHourNMin - 180) : angleHourNMin;
		angles[1] = angleMinNSec > 180 ? (angleMinNSec - 180 ) : angleMinNSec;
		
		return angles;
	}
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		hourString = new javax.swing.JTextField();
		minutesString = new javax.swing.JTextField();
		secondsString = new javax.swing.JTextField();
		moveHands = new javax.swing.JCheckBox();
		jLabel4 = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		resultPane = new javax.swing.JTextPane();
		processBtn = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jLabel1.setText("Hours");

		jLabel2.setText("Minutes");

		jLabel3.setText("Seconds");

		minutesString.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				minutesStringActionPerformed(evt);
			}
		});

		moveHands.setText("Hand moves in propotion");

		jLabel4.setText("Advance Options");

		jScrollPane1.setViewportView(resultPane);

		processBtn.setText("Process");
		processBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				processBtnActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jLabel1).addComponent(jLabel2).addComponent(jLabel3)
												.addComponent(jLabel4))
								.addGap(121, 121, 121)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(moveHands)
										.addGroup(layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(hourString, javax.swing.GroupLayout.DEFAULT_SIZE, 60,
														Short.MAX_VALUE)
												.addComponent(minutesString).addComponent(secondsString))
										.addComponent(processBtn))))
						.addContainerGap(42, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addGap(19, 19, 19)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jLabel1).addComponent(hourString, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel2)
						.addComponent(minutesString, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel3)
						.addComponent(secondsString, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(moveHands)
						.addComponent(jLabel4))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
				.addComponent(processBtn).addGap(18, 18, 18).addComponent(jScrollPane1,
						javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void minutesStringActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_minutesStringActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_minutesStringActionPerformed

	private void processBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_processBtnActionPerformed
		startApp();
	}// GEN-LAST:event_processBtnActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.
		 * html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(ClockAnglesApp.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(ClockAnglesApp.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(ClockAnglesApp.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ClockAnglesApp.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new ClockAnglesApp().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextField hourString;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextField minutesString;
	private javax.swing.JCheckBox moveHands;
	private javax.swing.JButton processBtn;
	private javax.swing.JTextPane resultPane;
	private javax.swing.JTextField secondsString;
	// End of variables declaration//GEN-END:variables


}
